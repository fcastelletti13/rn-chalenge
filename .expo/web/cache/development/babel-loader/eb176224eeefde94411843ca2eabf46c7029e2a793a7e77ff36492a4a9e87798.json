{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport React, { useEffect, useState } from 'react';\nimport { NavigationContainer } from '@react-navigation/native';\nimport { createStackNavigator } from '@react-navigation/stack';\nimport { AppProvider, useAppContext } from \"./src/context/AppContext.js\";\nimport axios from \"./src/api/axiosConfig.js\";\nimport LoginForm from \"./src/components/LoginForm\";\nimport HomeScreen from \"./src/screens/HomeScreen\";\nimport MenuScreen from \"./src/screens/MenuScreen\";\nimport OrderScreen from \"./src/screens/OrderScreen\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nvar Stack = createStackNavigator();\nvar App = function App() {\n  var _useAppContext = useAppContext(),\n    user = _useAppContext.user,\n    setUser = _useAppContext.setUser;\n  var _useState = useState(true),\n    _useState2 = _slicedToArray(_useState, 2),\n    isLoading = _useState2[0],\n    setIsLoading = _useState2[1];\n  return _jsx(NavigationContainer, {\n    children: _jsx(Stack.Navigator, {\n      initialRouteName: \"Home\",\n      children: _jsxs(_Fragment, {\n        children: [_jsx(Stack.Screen, {\n          name: \"Home\",\n          component: HomeScreen\n        }), _jsx(Stack.Screen, {\n          name: \"Menu\",\n          component: MenuScreen\n        }), _jsx(Stack.Screen, {\n          name: \"Order\",\n          component: OrderScreen\n        })]\n      })\n    })\n  });\n};\nexport default (function () {\n  return _jsx(AppProvider, {\n    children: _jsx(App, {})\n  });\n});","map":{"version":3,"names":["React","useEffect","useState","NavigationContainer","createStackNavigator","AppProvider","useAppContext","axios","LoginForm","HomeScreen","MenuScreen","OrderScreen","jsx","_jsx","Fragment","_Fragment","jsxs","_jsxs","Stack","App","_useAppContext","user","setUser","_useState","_useState2","_slicedToArray","isLoading","setIsLoading","children","Navigator","initialRouteName","Screen","name","component"],"sources":["C:/Users/devandroid/Downloads/rn-chalenge/App.js"],"sourcesContent":["import React, { useEffect, useState } from 'react';\r\nimport { NavigationContainer } from '@react-navigation/native';\r\nimport { createStackNavigator } from '@react-navigation/stack';\r\nimport { AppProvider, useAppContext } from './src/context/AppContext.js';\r\nimport axios from './src/api/axiosConfig.js';\r\nimport LoginForm from './src/components/LoginForm';\r\nimport HomeScreen from './src/screens/HomeScreen';\r\nimport MenuScreen from './src/screens/MenuScreen';\r\nimport OrderScreen from './src/screens/OrderScreen';\r\n\r\nconst Stack = createStackNavigator();\r\n\r\nconst App = () => {\r\n  const { user, setUser } = useAppContext();\r\n  const [isLoading, setIsLoading] = useState(true);\r\n\r\n  /*useEffect(() => {\r\n    // Verificar si hay un token de usuario almacenado en AsyncStorage u otro lugar\r\n    // y establecer el usuario en el contexto si está autenticado.\r\n    const checkAuthentication = async () => {\r\n      try {\r\n        const token = ''; // Obtén el token almacenado\r\n        if (token) {\r\n          // Si hay un token, realiza una solicitud para obtener información del usuario\r\n          const response = await axios.get('/user-info', {\r\n            headers: { Authorization: `Bearer ${token}` },\r\n          });\r\n          setUser(response.data);\r\n        }\r\n      } catch (error) {\r\n        console.error('Error al verificar la autenticación:', error);\r\n      } finally {\r\n        setIsLoading(false);\r\n      }\r\n    };\r\n\r\n    checkAuthentication();\r\n  }, [setUser]);\r\n\r\n  if (isLoading) {\r\n    return null; // Muestra una pantalla de carga mientras se verifica la autenticación\r\n  }*/\r\n  /*{!user ? (\r\n          <Stack.Screen name=\"Login\" component={LoginForm} options={{ headerShown: false }} />\r\n        ) : ( )}*/\r\n  return (\r\n    <NavigationContainer>\r\n      <Stack.Navigator initialRouteName=\"Home\">\r\n        \r\n          <>\r\n            <Stack.Screen name=\"Home\" component={HomeScreen} />\r\n            <Stack.Screen name=\"Menu\" component={MenuScreen} />\r\n            <Stack.Screen name=\"Order\" component={OrderScreen} />\r\n          </>\r\n        \r\n      </Stack.Navigator>\r\n    </NavigationContainer>\r\n  );\r\n}\r\n\r\nexport default () => {\r\n  return (\r\n    <AppProvider>\r\n      <App />\r\n    </AppProvider>\r\n  );\r\n}\r\n"],"mappings":";AAAA,OAAOA,KAAK,IAAIC,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAClD,SAASC,mBAAmB,QAAQ,0BAA0B;AAC9D,SAASC,oBAAoB,QAAQ,yBAAyB;AAC9D,SAASC,WAAW,EAAEC,aAAa;AACnC,OAAOC,KAAK;AACZ,OAAOC,SAAS;AAChB,OAAOC,UAAU;AACjB,OAAOC,UAAU;AACjB,OAAOC,WAAW;AAAkC,SAAAC,GAAA,IAAAC,IAAA;AAAA,SAAAC,QAAA,IAAAC,SAAA;AAAA,SAAAC,IAAA,IAAAC,KAAA;AAEpD,IAAMC,KAAK,GAAGd,oBAAoB,CAAC,CAAC;AAEpC,IAAMe,GAAG,GAAG,SAANA,GAAGA,CAAA,EAAS;EAChB,IAAAC,cAAA,GAA0Bd,aAAa,CAAC,CAAC;IAAjCe,IAAI,GAAAD,cAAA,CAAJC,IAAI;IAAEC,OAAO,GAAAF,cAAA,CAAPE,OAAO;EACrB,IAAAC,SAAA,GAAkCrB,QAAQ,CAAC,IAAI,CAAC;IAAAsB,UAAA,GAAAC,cAAA,CAAAF,SAAA;IAAzCG,SAAS,GAAAF,UAAA;IAAEG,YAAY,GAAAH,UAAA;EA+B9B,OACEX,IAAA,CAACV,mBAAmB;IAAAyB,QAAA,EAClBf,IAAA,CAACK,KAAK,CAACW,SAAS;MAACC,gBAAgB,EAAC,MAAM;MAAAF,QAAA,EAEpCX,KAAA,CAAAF,SAAA;QAAAa,QAAA,GACEf,IAAA,CAACK,KAAK,CAACa,MAAM;UAACC,IAAI,EAAC,MAAM;UAACC,SAAS,EAAExB;QAAW,CAAE,CAAC,EACnDI,IAAA,CAACK,KAAK,CAACa,MAAM;UAACC,IAAI,EAAC,MAAM;UAACC,SAAS,EAAEvB;QAAW,CAAE,CAAC,EACnDG,IAAA,CAACK,KAAK,CAACa,MAAM;UAACC,IAAI,EAAC,OAAO;UAACC,SAAS,EAAEtB;QAAY,CAAE,CAAC;MAAA,CACrD;IAAC,CAEU;EAAC,CACC,CAAC;AAE1B,CAAC;AAED,gBAAe,YAAM;EACnB,OACEE,IAAA,CAACR,WAAW;IAAAuB,QAAA,EACVf,IAAA,CAACM,GAAG,IAAE;EAAC,CACI,CAAC;AAElB,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}